"""Main Window View class for the DCMspec Explorer application."""

import os

from PySide6.QtCore import Signal
from PySide6.QtGui import QFont
from PySide6.QtWidgets import QMainWindow
from dcmspec_explorer.view.main_window_ui import Ui_MainWindow  # Generated by: pyside6-uic from main_window.ui


class MainWindow(QMainWindow):
    """Provide the main application window for the DCMspec Explorer.

    Set up and display the primary user interface for browsing and exploring DICOM specifications.
    """

    # Define custom signals that will be emitted when UI events occur.
    window_shown = Signal()
    iod_treeview_item_selected = Signal(object)  # index

    def __init__(self):
        """Initialize the main window using compiled UI from Qt Designer.

        Load the UI helper class generated by pyside6-uic from the .ui file and set up the main window.
        """
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        # Access widgets as self.ui.myButton, etc.

        # Set the fonts to Monospace in the treeviw and details panel
        font = QFont("Monospace")
        font.setStyleHint(QFont.Monospace)
        self.ui.iodTreeView.setFont(font)
        self.ui.detailsTextBrowser.setFont(font)

        # Load details pane CSS from resources/styles
        css_path = os.path.join(os.path.dirname(__file__), "..", "resources", "styles", "details.css")
        try:
            with open(css_path, "r", encoding="utf-8") as f:
                self.details_css = f.read()
        except Exception as e:
            self.details_css = ""
            print(f"Warning: Could not load details.css: {e}")

        # Connect to UI widgets signals
        self.ui.iodTreeView.clicked.connect(self._on_treeview_item_clicked)

    def set_details_html(self, html_body: str):
        """Set the HTML content of the details pane, injecting the loaded CSS."""
        html = f"<style>{self.details_css}</style>\n{html_body}"
        self.ui.detailsTextBrowser.setHtml(html)

    def showEvent(self, event):
        """Override the Qt showEvent to emit a custom signal after the window is shown.

        Allows to add custom behavior that should happen right after the window is displayed to the user.
        """
        # Call the base class implementation to ensure the window is displayed correctly.
        super().showEvent(event)
        # Set initial focus to the treeview
        self.ui.iodTreeView.setFocus()
        # Emit a custom signal to notify that the window has been shown.
        self.window_shown.emit()

    def _on_treeview_item_clicked(self, index):
        """Emit a custom signal when a treeview item is clicked.

        Args:
            index: The index of the clicked item.

        """
        self.iod_treeview_item_selected.emit(index)

    def update_status_bar(self, message):
        """Update the status bar with a message."""
        self.statusBar().showMessage(message)

    def update_treeview(self, tree_model):
        """Update the treeview with a new model."""
        self.ui.iodTreeView.setModel(tree_model)
        # Set default column widths
        self.ui.iodTreeView.setColumnWidth(0, 400)  # Name
        self.ui.iodTreeView.setColumnWidth(1, 100)  # Kind
        self.ui.iodTreeView.setColumnWidth(2, 30)  # Usage
        self.ui.iodTreeView.setColumnWidth(3, 20)  # Favorite

    def show_error(self, message):
        """Show an error message dialog."""
        from PySide6.QtWidgets import QMessageBox

        QMessageBox.critical(self, "Error", message)

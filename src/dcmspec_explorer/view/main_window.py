"""Main Window View class for the DCMspec Explorer application."""

import os
from typing import Optional

from PySide6.QtCore import Signal, QUrl, Qt, QModelIndex, QPoint
from PySide6.QtGui import QFont, QStandardItemModel, QShowEvent, QFontDatabase, QIcon
from PySide6.QtWidgets import QMainWindow, QApplication
from PySide6.QtWidgets import QMessageBox

from dcmspec_explorer.view.main_window_ui import Ui_MainWindow  # Generated by: pyside6-uic from main_window.ui
from dcmspec_explorer.view.favorite_icon_delegate import FavoriteIconDelegate
from dcmspec_explorer.controller.iod_treeview_adapter import NODE_PATH_ROLE


class MainWindow(QMainWindow):
    """Provide the main application window for the DCMspec Explorer.

    Set up and display the primary user interface for browsing and exploring DICOM specifications.
    """

    # Define column indices for the treeview
    COL_NAME = 0
    COL_KIND = 1
    COL_USAGE = 2
    COL_FAVORITE = 3

    # Define custom signals that will be emitted when UI events occur.
    window_shown = Signal()
    iod_treeview_item_selected = Signal(object)  # signal payload is item index
    iod_treeview_right_click = Signal(QModelIndex, QPoint)  # index and global position
    header_clicked = Signal(int)  # signal payload is clicked column index
    search_text_changed = Signal(str)  # signal payload is search box text
    toggle_favorites_clicked = Signal()  # signal for Show All / Show Favorites button
    reload_clicked = Signal()  # signal for Reload button

    def __init__(self):
        """Initialize the main window using compiled UI from Qt Designer.

        Load the UI helper class generated by pyside6-uic from the .ui file and set up the main window.
        """
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        # Access widgets as self.ui.myButton, etc.

        # Set the fonts to Monospace in the treeview and details panel
        font = self.get_portable_monospace_font()
        self.ui.iodTreeView.setFont(font)
        self.ui.detailsTextBrowser.setFont(font)

        # Reset the header font to the default Qt font (as it inherited the monospace font)
        header = self.ui.iodTreeView.header()
        default_font = QApplication.font()
        header_font = QFont(default_font.family(), default_font.pointSize() - 1, QFont.Bold)
        header.setFont(header_font)
        header.setSectionsClickable(True)

        # Add custom context menu for the treeview
        self.ui.iodTreeView.setContextMenuPolicy(Qt.CustomContextMenu)

        # Custom header style: only show a vertical bar between Name and Kind columns
        self.ui.iodTreeView.header().setStyleSheet("""
            QHeaderView::section {
                border: none;
                background: transparent;
                color: palette(window-text);
            }
        """)

        # Load details pane CSS from resources/styles
        css_path = os.path.join(os.path.dirname(__file__), "..", "resources", "styles", "details.css")
        try:
            with open(css_path, "r", encoding="utf-8") as f:
                self.details_css = f.read()
        except Exception as e:
            self.details_css = ""
            print(f"Warning: Could not load details.css: {e}")

        # Load application icons
        heart_icon_path = os.path.join(os.path.dirname(__file__), "..", "resources", "icons", "heart.svg")
        self.heart_icon = QIcon(heart_icon_path) if os.path.exists(heart_icon_path) else None

        # Connect to UI widgets signals
        self.ui.iodTreeView.clicked.connect(self._on_treeview_item_clicked)
        self.ui.iodTreeView.customContextMenuRequested.connect(self._on_treeview_right_click)
        self.ui.searchLineEdit.textChanged.connect(self._on_search_text_changed)
        header.sectionClicked.connect(self._on_treeview_header_clicked)
        self.ui.toggleFavoritesPushButton.clicked.connect(self._on_toggle_favorites_clicked)
        self.ui.reloadPushButton.clicked.connect(self._on_reload_clicked)

    def get_portable_monospace_font(self, size: Optional[int] = None) -> QFont:
        """Get a monospace font that is likely to be available on most platforms."""
        candidates = ["Menlo", "Consolas", "DejaVu Sans Mono", "Liberation Mono", "Monaco", "Courier New", "Courier"]
        available = QFontDatabase().families()
        for fam in candidates:
            if fam in available:
                return QFont(fam) if size is None else QFont(fam, size)
        # Fallback: use system default monospace
        font = QFont()
        font.setStyleHint(QFont.Monospace)
        if size is not None:
            font.setPointSize(size)
        return font

    def get_heart_icon(self) -> Optional[QIcon]:
        """Return the QIcon for the favorites heart, or None if not available."""
        return self.heart_icon

    def set_details_html(self, html_body: str) -> None:
        """Set the HTML content of the details pane, injecting the loaded CSS."""
        html = f"<style>{self.details_css}</style>\n{html_body}"
        self.ui.detailsTextBrowser.setHtml(html)

    def showEvent(self, event: QShowEvent) -> None:
        """Override the Qt showEvent to emit a custom signal after the window is shown.

        Allows to add custom behavior that should happen right after the window is displayed to the user.
        """
        # Call the base class implementation to ensure the window is displayed correctly.
        super().showEvent(event)
        # Set initial focus to the treeview
        self.ui.iodTreeView.setFocus()
        # Emit a custom signal to notify that the window has been shown.
        self.window_shown.emit()

    def _on_treeview_item_clicked(self, index: QModelIndex) -> None:
        """Emit a custom signal when a treeview item is clicked.

        Args:
            index: The index of the clicked item.

        """
        self.iod_treeview_item_selected.emit(index)

    def _on_treeview_header_clicked(self, logical_index: int) -> None:
        """Emit a custom signal when a treeview header is clicked.

        Args:
            logical_index: The logical index of the clicked column.

        """
        self.header_clicked.emit(logical_index)

    def _on_treeview_right_click(self, pos):
        index = self.ui.iodTreeView.indexAt(pos)
        if not index.isValid():
            return
        # Only allow context menu for top-level items (IODs)
        if index.parent().isValid():
            return
        global_pos = self.ui.iodTreeView.viewport().mapToGlobal(pos)
        self.iod_treeview_right_click.emit(index, global_pos)

    def _on_search_text_changed(self, text: str) -> None:
        """Emit a custom signal when the search box text changes."""
        self.search_text_changed.emit(text)

    def _on_toggle_favorites_clicked(self):
        """Emit a custom signal when the Show All / Show Favorites button is clicked."""
        self.toggle_favorites_clicked.emit()

    def _on_reload_clicked(self):
        """Emit a custom signal when the Reload button is clicked."""
        self.reload_clicked.emit()

    def set_show_favorites_button_label(self, show_favorites: bool):
        """Set the label of the Show All / Show Favorites button."""
        if show_favorites:
            self.ui.toggleFavoritesPushButton.setText("Show All")
        else:
            self.ui.toggleFavoritesPushButton.setText("Show Favorites")

    def update_status_bar(self, message: str) -> None:
        """Update the status bar with a message."""
        self.statusBar().showMessage(message)

    def update_treeview(self, tree_model: QStandardItemModel) -> None:
        """Update the treeview with a new model."""
        self.ui.iodTreeView.setModel(tree_model)
        # Set default column widths
        self.ui.iodTreeView.setColumnWidth(self.COL_NAME, 400)
        self.ui.iodTreeView.setColumnWidth(self.COL_KIND, 100)
        self.ui.iodTreeView.setColumnWidth(self.COL_USAGE, 30)
        self.ui.iodTreeView.setColumnWidth(self.COL_FAVORITE, 20)

        # Set an item delegate for the favorite column to display the favorite icon
        self.ui.iodTreeView.setItemDelegateForColumn(
            self.COL_FAVORITE, FavoriteIconDelegate(self.get_heart_icon(), self.ui.iodTreeView)
        )

    def update_treeview_sort_indicator(self, sort_column: int, sort_reverse: bool) -> None:
        """Update the sort indicator in the treeview header.

        Args:
            sort_column (int): The column index to sort by.
            sort_reverse (bool): Whether to sort in reverse order.

        """
        header = self.ui.iodTreeView.header()
        header.setSortIndicator(sort_column, Qt.DescendingOrder if sort_reverse else Qt.AscendingOrder)
        header.setSortIndicatorShown(True)

    def show_error(self, message: str) -> None:
        """Show an error message dialog."""
        QMessageBox.critical(self, "Error", message)

    def show_url_link_warning_dialog(self, url_str: str) -> bool:
        """Show a warning dialog before opening an external link and open if confirmed."""
        url = QUrl(url_str)
        reply = QMessageBox.warning(
            self,
            "Open External Link",
            f"You are about to open this link in your browser:\n\n{url.toString()}\n\n"
            "Only proceed if you trust this link.\n\nDo you want to continue?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No,
        )
        if reply == QMessageBox.StandardButton.Yes:
            from PySide6.QtGui import QDesktopServices

            QDesktopServices.openUrl(url)
            return True
        return False

    def show_anchor_link_warning_dialog(self, url_str):
        """Show a warning dialog for unsupported internal anchor links."""
        QMessageBox.information(
            self,
            "Anchor Link Not Supported",
            f"This link refers to an anchor within the page:\n\n{url_str}\n\n"
            "Anchor links are not yet supported in the details pane.",
        )

    def get_selected_node_path(self):
        """Get the currently selected node's path from the treeview."""
        selection_model = self.ui.iodTreeView.selectionModel()
        if not selection_model or not selection_model.hasSelection():
            return None
        index = selection_model.currentIndex()
        treeview_model = index.model()
        if not treeview_model:
            return None
        selected_item_name = treeview_model.itemFromIndex(index.siblingAtColumn(0))
        return selected_item_name.data(NODE_PATH_ROLE) if selected_item_name else None

"""Main Window View class for the DCMspec Explorer application."""

import os

from PySide6.QtCore import Signal, QUrl, Qt, QModelIndex
from PySide6.QtGui import QFont, QStandardItemModel, QShowEvent
from PySide6.QtWidgets import QMainWindow
from PySide6.QtWidgets import QMessageBox

from dcmspec_explorer.view.main_window_ui import Ui_MainWindow  # Generated by: pyside6-uic from main_window.ui


class MainWindow(QMainWindow):
    """Provide the main application window for the DCMspec Explorer.

    Set up and display the primary user interface for browsing and exploring DICOM specifications.
    """

    # Define custom signals that will be emitted when UI events occur.
    window_shown = Signal()
    iod_treeview_item_selected = Signal(object)  # index

    def __init__(self):
        """Initialize the main window using compiled UI from Qt Designer.

        Load the UI helper class generated by pyside6-uic from the .ui file and set up the main window.
        """
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        # Access widgets as self.ui.myButton, etc.

        # Set the fonts to Monospace in the treeviw and details panel
        font = QFont("Monospace")
        font.setStyleHint(QFont.Monospace)
        self.ui.iodTreeView.setFont(font)
        self.ui.detailsTextBrowser.setFont(font)

        # Load details pane CSS from resources/styles
        css_path = os.path.join(os.path.dirname(__file__), "..", "resources", "styles", "details.css")
        try:
            with open(css_path, "r", encoding="utf-8") as f:
                self.details_css = f.read()
        except Exception as e:
            self.details_css = ""
            print(f"Warning: Could not load details.css: {e}")

        # Connect to UI widgets signals
        self.ui.iodTreeView.clicked.connect(self._on_treeview_item_clicked)

    def set_details_html(self, html_body: str) -> None:
        """Set the HTML content of the details pane, injecting the loaded CSS."""
        html = f"<style>{self.details_css}</style>\n{html_body}"
        self.ui.detailsTextBrowser.setHtml(html)

    def showEvent(self, event: QShowEvent) -> None:
        """Override the Qt showEvent to emit a custom signal after the window is shown.

        Allows to add custom behavior that should happen right after the window is displayed to the user.
        """
        # Call the base class implementation to ensure the window is displayed correctly.
        super().showEvent(event)
        # Set initial focus to the treeview
        self.ui.iodTreeView.setFocus()
        # Emit a custom signal to notify that the window has been shown.
        self.window_shown.emit()

    def _on_treeview_item_clicked(self, index: QModelIndex) -> None:
        """Emit a custom signal when a treeview item is clicked.

        Args:
            index: The index of the clicked item.

        """
        self.iod_treeview_item_selected.emit(index)

    def update_status_bar(self, message: str) -> None:
        """Update the status bar with a message."""
        self.statusBar().showMessage(message)

    def update_treeview(self, tree_model: QStandardItemModel) -> None:
        """Update the treeview with a new model."""
        self.ui.iodTreeView.setModel(tree_model)
        # Set default column widths
        self.ui.iodTreeView.setColumnWidth(0, 400)  # Name
        self.ui.iodTreeView.setColumnWidth(1, 100)  # Kind
        self.ui.iodTreeView.setColumnWidth(2, 30)  # Usage
        self.ui.iodTreeView.setColumnWidth(3, 20)  # Favorite

    def show_error(self, message: str) -> None:
        """Show an error message dialog."""
        QMessageBox.critical(self, "Error", message)

    def show_url_link_warning_dialog(self, url_str: str) -> bool:
        """Show a warning dialog before opening an external link and open if confirmed."""
        url = QUrl(url_str)
        reply = QMessageBox.warning(
            self,
            "Open External Link",
            f"You are about to open this link in your browser:\n\n{url.toString()}\n\n"
            "Only proceed if you trust this link.\n\nDo you want to continue?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No,
        )
        if reply == QMessageBox.StandardButton.Yes:
            from PySide6.QtGui import QDesktopServices

            QDesktopServices.openUrl(url)
            return True
        return False

    def show_anchor_link_warning_dialog(self, url_str):
        """Show a warning dialog for unsupported internal anchor links."""
        QMessageBox.information(
            self,
            "Anchor Link Not Supported",
            f"This link refers to an anchor within the page:\n\n{url_str}\n\n"
            "Anchor links are not yet supported in the details pane.",
        )

    def get_selected_node_path(self):
        """Get the currently selected node's path from the treeview."""
        selection_model = self.ui.iodTreeView.selectionModel()
        if not selection_model or not selection_model.hasSelection():
            return None
        index = selection_model.currentIndex()
        treeview_model = index.model()
        if not treeview_model:
            return None
        selected_item_name = treeview_model.itemFromIndex(index.siblingAtColumn(0))
        return selected_item_name.data(Qt.UserRole) if selected_item_name else None
